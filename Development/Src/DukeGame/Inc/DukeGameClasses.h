/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
    Copyright 1998-2013 Epic Games, Inc. All Rights Reserved.
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#include "DukeGameNames.h"

// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

#ifndef INCLUDED_DUKEGAME_ENUMS
#define INCLUDED_DUKEGAME_ENUMS 1


#endif // !INCLUDED_DUKEGAME_ENUMS
#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif


#ifndef NAMES_ONLY

#ifndef INCLUDED_DUKEGAME_CLASSES
#define INCLUDED_DUKEGAME_CLASSES 1
#define ENABLE_DECLARECLASS_MACRO 1
#include "UnObjBas.h"
#undef ENABLE_DECLARECLASS_MACRO

class ADukeHUD : public AHUD
{
public:
    //## BEGIN PROPS DukeHUD
    FLOAT Opacity;
    FColor CrosshairColor;
    FColor TextColor;
    FColor HUDColor;
    INT CrosshairCount;
    class UTexture* CrosshairTextures[20];
    FLOAT DesiredIndexTop;
    FLOAT RootIndexTop;
    FLOAT IndexTop;
    FLOAT IndexBottom;
    FLOAT IndexAdjust;
    FLOAT BarOffset;
    FLOAT HUDScale;
    FLOAT HUDScaleX;
    FLOAT HUDScaleY;
    INT MaxIndexItems;
    INT ItemSpace;
    FLOAT TextRightAdjust;
    FLOAT BarPos;
    FLOAT BarLeft;
    FLOAT TitleLeft;
    FLOAT TitleOffset;
    FLOAT SlideRate;
    FLOAT IndexTopOffset;
    FStringNoInit IndexName;
    class UTexture* GradientTexture;
    class UTexture* IndexBarLeftTexture;
    class UTexture* IndexBarRightTexture;
    class UTexture* IndexBarBottomTexture;
    class UTexture* InventoryBarTopTexture;
    class UTexture* InventoryBarBotTexture;
    class UTexture* InventoryCatHLTexture;
    class UTexture* InventoryCatHLTexture2;
    class UTexture* MiscBarTabTexture;
    class UTexture* MiscBarHLTexture;
    class UTexture* HUDTemplateTexture;
    class UTexture* ItemSlantTexture;
    class UTexture* ItemSlantHLTexture;
    class UTexture* MiscBarTexture;
    class UTexture* MiscBarTexture2;
    class UTexture* NumberCircleTexture;
    //## END PROPS DukeHUD

    virtual void HudStartup();
    virtual void RenderHud();
    virtual void DrawScaledTexture(class UTexture* Icon,FLOAT X,FLOAT Y,FVector Scale);
    DECLARE_FUNCTION(execHudStartup)
    {
        P_FINISH;
        this->HudStartup();
    }
    DECLARE_FUNCTION(execRenderHud)
    {
        P_FINISH;
        this->RenderHud();
    }
    DECLARE_FUNCTION(execDrawScaledTexture)
    {
        P_GET_OBJECT(UTexture,Icon);
        P_GET_FLOAT(X);
        P_GET_FLOAT(Y);
        P_GET_STRUCT(FVector,Scale);
        P_FINISH;
        this->DrawScaledTexture(Icon,X,Y,Scale);
    }
    DECLARE_CLASS(ADukeHUD,AHUD,0|CLASS_Transient|CLASS_Config,DukeGame)
	void DrawStatusIndex();
	void DrawCrosshair();
};

struct DukePawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
    DukePawn_eventUpdateEyeHeight_Parms(EEventParm)
    {
    }
};
class ADukePawn : public AGamePawn
{
public:
    //## BEGIN PROPS DukePawn
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT JumpBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    FVector WalkBob;
    //## END PROPS DukePawn

    virtual void AddDefaultInventory();
    DECLARE_FUNCTION(execAddDefaultInventory)
    {
        P_FINISH;
        this->AddDefaultInventory();
    }
    void eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        DukePawn_eventUpdateEyeHeight_Parms Parms(EC_EventParm);
        if(IsProbing(NAME_UpdateEyeHeight)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(DUKEGAME_UpdateEyeHeight),&Parms);
        }
    }
    DECLARE_CLASS(ADukePawn,AGamePawn,0|CLASS_Config,DukeGame)
	virtual void TickSpecial( FLOAT DeltaSeconds );
};

struct DukeWeapon_eventSetPosition_Parms
{
    class ADukePawn* Holder;
    DukeWeapon_eventSetPosition_Parms(EEventParm)
    {
    }
};
class ADukeWeapon : public AWeapon
{
public:
    //## BEGIN PROPS DukeWeapon
    INT AmmoCount;
    INT MaxAmmoCount;
    FLOAT InventoryWeight;
    BITFIELD bForceHidden:1;
    BITFIELD bPendingShow:1;
    SCRIPT_ALIGN;
    FVector PlayerViewOffset;
    FVector SmallWeaponsOffset;
    FLOAT WideScreenOffsetScaling;
    FRotator WidescreenRotationOffset;
    FVector HiddenWeaponsOffset;
    FLOAT ProjectileSpawnOffset;
    FLOAT BobDamping;
    FLOAT JumpDamping;
    TArrayNoInit<FName> WeaponIdleAnims;
    TArrayNoInit<FName> WeaponFireAnim;
    //## END PROPS DukeWeapon

    void eventSetPosition(class ADukePawn* Holder)
    {
        DukeWeapon_eventSetPosition_Parms Parms(EC_EventParm);
        Parms.Holder=Holder;
        ProcessEvent(FindFunctionChecked(DUKEGAME_SetPosition),&Parms);
    }
    DECLARE_CLASS(ADukeWeapon,AWeapon,0|CLASS_Config,DukeGame)
    NO_DEFAULT_CONSTRUCTOR(ADukeWeapon)
};

class AWeaponPistol : public ADukeWeapon
{
public:
    //## BEGIN PROPS WeaponPistol
    //## END PROPS WeaponPistol

    DECLARE_CLASS(AWeaponPistol,ADukeWeapon,0|CLASS_Config,DukeGame)
    NO_DEFAULT_CONSTRUCTOR(AWeaponPistol)
};

#undef DECLARE_CLASS
#undef DECLARE_CASTED_CLASS
#undef DECLARE_ABSTRACT_CLASS
#undef DECLARE_ABSTRACT_CASTED_CLASS
#endif // !INCLUDED_DUKEGAME_CLASSES
#endif // !NAMES_ONLY

AUTOGENERATE_FUNCTION(ADukeHUD,-1,execDrawScaledTexture);
AUTOGENERATE_FUNCTION(ADukeHUD,-1,execRenderHud);
AUTOGENERATE_FUNCTION(ADukeHUD,-1,execHudStartup);
AUTOGENERATE_FUNCTION(ADukePawn,-1,execAddDefaultInventory);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef DUKEGAME_NATIVE_DEFS
#define DUKEGAME_NATIVE_DEFS

#define AUTO_INITIALIZE_REGISTRANTS_DUKEGAME \
	ADukeHUD::StaticClass(); \
	GNativeLookupFuncs.Set(FName("DukeHUD"), GDukeGameADukeHUDNatives); \
	ADukePawn::StaticClass(); \
	GNativeLookupFuncs.Set(FName("DukePawn"), GDukeGameADukePawnNatives); \
	ADukeWeapon::StaticClass(); \
	AWeaponPistol::StaticClass(); \

#endif // DUKEGAME_NATIVE_DEFS

#ifdef NATIVES_ONLY
FNativeFunctionLookup GDukeGameADukeHUDNatives[] = 
{ 
	MAP_NATIVE(ADukeHUD, execDrawScaledTexture)
	MAP_NATIVE(ADukeHUD, execRenderHud)
	MAP_NATIVE(ADukeHUD, execHudStartup)
	{NULL, NULL}
};

FNativeFunctionLookup GDukeGameADukePawnNatives[] = 
{ 
	MAP_NATIVE(ADukePawn, execAddDefaultInventory)
	{NULL, NULL}
};

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,Opacity)
VERIFY_CLASS_OFFSET_NODIE(ADukeHUD,DukeHUD,NumberCircleTexture)
VERIFY_CLASS_SIZE_NODIE(ADukeHUD)
VERIFY_CLASS_OFFSET_NODIE(ADukePawn,DukePawn,Bob)
VERIFY_CLASS_OFFSET_NODIE(ADukePawn,DukePawn,WalkBob)
VERIFY_CLASS_SIZE_NODIE(ADukePawn)
VERIFY_CLASS_OFFSET_NODIE(ADukeWeapon,DukeWeapon,AmmoCount)
VERIFY_CLASS_OFFSET_NODIE(ADukeWeapon,DukeWeapon,WeaponFireAnim)
VERIFY_CLASS_SIZE_NODIE(ADukeWeapon)
VERIFY_CLASS_SIZE_NODIE(AWeaponPistol)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
